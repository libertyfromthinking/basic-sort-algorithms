내부 정렬
- 소량의 데이터를 주기억장치에 저장시켜 정렬하는 방식
종류 : 히프 정렬, 삽입 정렬, 셸 정렬, 버블 정렬, 선택 정렬, 퀵 정렬, 2-Way Merge 정렬, 기수 정렬(=Radix Sort)

외부 정렬
- 대량의 데이터를 보조기억장치에 기억시켜서 정렬하는 방식, 대부분 병합 정렬(Merge Sort)기법으로 처리
종류 : 밸런스 병합 정렬, 캐스케이드 병합 정렬, 폴리파즈 병합 정렬, 오실레이팅 병합 정렬

**오름차순 기준
버블정렬 : 1회전에 인덱스 1,2 비교 2,3 비교 3,4비교 2회전에도 1,2 비교 2,3 비교.. 최대값 또는 최소값은 인덱스 마지막에 정렬되므로 마지막 값은 검사하지 않음, 배열 크기-1 만큼 반복

선택정렬 : 1회전에 1,2 비교 1,3 비교 1,4 비교 1,5 비교 2회전에 2,3 비교 2,4 비교 ... 배열 크기-1 만큼 반복

삽입정렬 : 1회전에 2가 키값, 1,2비교 2회전에 3이 키값으로 2와 비교 후 교환일어나면 1과 비교 일어나지않으면 다음회전으로 , 3회전엔 4가 키값으로 3과비교 후 교환 일어나면 2와비교 안일어나면 다음회전.. 오름차순 기준으로 인덱스값 -1 해가며 정렬하다 자신보다 작은값나오면 해당 인덱스 정렬 멈추고 다음 인덱스로 넘어감, 배열 크기-1 만큼 반복

병합정렬 : 16827453이 있을 때 최소단위까지 나눈 후(1 6 8 2 7 4 5 3) 두개씩 합치고(16 28 47 35) 합친 걸 다시 옆의 두개랑 합침(1268 3457) 후에 반복 

퀵정렬 : 임의의 값(보통 첫번째요소)을 피봇값으로 정하고 피봇값보다 적은값, 많은값으로 나눔, 이후 재귀적으로 실행

쉘정렬 : 리스트길이가 10이면 5를 요소간 간격으로 갖는 서브리스트 생성 후 삽입정렬, 그 다음은 2를 요소간 갖는 서브리스트로 다시 삽입정렬, 1을 요소로 갖는, 즉 일반삽입정렬 실행

팀정렬 : 파이썬 내장함수 sort의 기본정렬, 병합정렬처럼 일정단위로 나눈 후 삽입정렬 실행, 최상의 경우 삽입정렬의 O(n), 최악의 경우 병합정렬의 O(nlogn)

이진 검색 : 전체 데이터를 두 개의 서브 데이터로 분리해 가며 검색, 검색을 거듭할 때마다 데이터의 수가 절반으로 줄어듬
- 탐색 효율이 좋고 시간이 적게 소요
- 순서화된 파일이어야 함
- 찾고자 하는 key값을 중간 레코드 key값과 비교하며 검색
- 중간레코드번호 : 첫번째 레코드번호 + 마지막레코드번호 / 2


1 logn n nlogn n^2 n^3 2^n n!